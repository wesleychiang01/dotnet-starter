@{
    ViewData["Title"] = "Home Page";
}

<style>
    .chart-container {
        width: 100%; /* Set the width to display each chart side by side */
        float: left; /* Align elements in a row */
        box-sizing: border-box;
        padding: 20px;
    }

    canvas {
        width: 100% !important; /* Make canvas responsive */
        height: auto !important;
    }

    .progress-bar {
        position: relative;
    }

    .progress-bar {
        position: relative;
    }

    .progress-container {
        display: flex;
        align-items: center;
        position: relative;
    }

    .spacer {
        width: 10px; /* Adjust the width to increase/decrease spacing */
    }

    .progress-bar {
        height: 100%;
    }

    .progress-label {
        font-size: 14px; /* Adjust the font size as needed */
    }

</style>

<br>
<h1>Battery Status</h1>
<div class="progress-container">
    <span class="progress-label">0%</span>
    <div class="spacer"></div>
    <div class="progress" style="height: 30px; flex: 1;">
        <div class="progress-bar" role="progressbar" style="width: 50%" aria-valuenow="50" aria-valuemin="0" aria-valuemax="100">
        </div>
    </div>
    <div class="spacer"></div>
    <span class="progress-label">100%</span>
</div>

<br>
<h1>Charging Status</h1>
<br>
<div class="container">
    <div class="row">
        <div class="col-12 col-md ml-auto">
            <button class="btn btn-primary" onclick="navigateToParameterEntities()">Go to Parameter Entities</button>
        </div>
    </div>
</div>

<div class="container">
    <div class="row">
        <div class="col-12 col-md">
            <div class="chart-container text-primary">
                <canvas id="chart1"></canvas>
            </div>
        </div>
        <div class="col-12 col-md">
            <div class="chart-container text-primary">
                <canvas id="chart2"></canvas> 
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-12 col-md">
            <div class="chart-container text-primary">
                <canvas id="chart3"></canvas>
            </div>
        </div>
        <div class="col-12 col-md">
            <div class="chart-container text-primary">
                <canvas id="chart4"></canvas>
            </div>
        </div>
    </div>
</div>

<h1>Google Map</h1>
<div id="googleMap" style="width:100%;height:400px;"></div>

<script>

    function myMap() {
        var latitude = @Html.Raw(Json.Serialize(Model.latitude));
        var longitude = @Html.Raw(Json.Serialize(Model.longitude));

        console.log('Latitude:', latitude);
        console.log('Longitude:', longitude);

        var mapProp = {
            center: new google.maps.LatLng(latitude, longitude),
            zoom: 18,
        };

        var map = new google.maps.Map(document.getElementById("googleMap"), mapProp);

        // Create a marker and set its position
        var marker = new google.maps.Marker({
            position: new google.maps.LatLng(latitude, longitude),
            map: map,
            title: 'Your Tooltip Text', // Replace with your tooltip text
        });

        // Create a tooltip (infowindow) for the marker
        var infowindow = new google.maps.InfoWindow({
            content: 'Your Tooltip Content', // Replace with your tooltip content
        });

        // Show the tooltip when the user clicks on the marker
        marker.addListener('click', function () {
            infowindow.open(map, marker);
        });

        // Set the cursor to a pointer when hovering over the marker
        marker.addListener('mouseover', function () {
            map.setOptions({ draggableCursor: 'pointer' });
        });

        // Set the cursor back to the default when not hovering over the marker
        marker.addListener('mouseout', function () {
            map.setOptions({ draggableCursor: null });
        });

        // Create a circle overlay to represent the radius
        var radiusInMeters = 25; // Set your desired radius in meters
        var circle = new google.maps.Circle({
            strokeColor: '#FF0000', // Red outline color
            strokeOpacity: 0.8,
            strokeWeight: 2,
            fillColor: '#FF0000', // Red fill color
            fillOpacity: 0.35,
            map: map,
            center: new google.maps.LatLng(latitude, longitude),
            radius: radiusInMeters,
        });
    }

    var batteryVoltData = @Html.Raw(Json.Serialize(ViewBag.BatteryVoltData));
    var batteryAmpData = @Html.Raw(Json.Serialize(ViewBag.SolarAmpData));
    var eventTimeData = @Html.Raw(Json.Serialize(ViewBag.EventTimeData));
    var temperatureData = @Html.Raw(Json.Serialize(ViewBag.TemperatureData));
    var lightIntensityData = @Html.Raw(Json.Serialize(ViewBag.LightIntensityData));


    // SolarVolt
    const solarVoltChart = {
        labels: eventTimeData,
        datasets: [{
            label: 'Battery Voltage',
            data: batteryVoltData,
            borderColor: 'rgba(144, 238, 144, 1)', 
            backgroundColor: 'rgba(144, 238, 144, 1)', 
        }]
    };

    // SolarVolt
    const solarVoltChartConfig = {
        type: 'line',
        data: solarVoltChart,
        options: {
            // Add necessary options for the chart display
            // (e.g., responsive, legend, scales)
        }
    };

    // Light Intensity
    const lightChart = {
        labels: eventTimeData,
        datasets: [{
            label: 'Light Intensity',
            data: lightIntensityData,
            borderColor: 'yellow', // Change line color to grey for solar ampere
            backgroundColor: 'rgba(255, 255, 0, 1)', // Grey background color with opacity
        }]
    };

    // Light Intensity
    const lightChartConfig = {
        type: 'line',
        data: lightChart,
        options: {
            // Add necessary options for the chart display
            // (e.g., responsive, legend, scales)
        }
    };

    //ampere chart
    const batteryAmpChart = {
        labels: eventTimeData,
        datasets: [{
            label: 'Battery Ampere',
            data: batteryAmpData, // Make sure you fetch the data for battery amp
            borderColor: 'red', // Change line color for battery amp
            backgroundColor: 'rgba(255, 0, 0, 1)', // Red background color with opacity
        }]
    };

    // ampere chart
    const batteryAmpChartConfig = {
        type: 'line',
        data: batteryAmpChart,
        options: {
            // Add necessary options for the chart display
        }
    };

    // temperature
    const temperatureChart = {
        labels: eventTimeData,
        datasets: [{
            label: 'Temperature',
            data: temperatureData, // Make sure you fetch the data for temperature
            borderColor: 'orange',
            backgroundColor: 'rgba(255, 165, 0, 1)',
        }]
    };

    // temperature
    const temperatureChartConfig = {
        type: 'line',
        data: temperatureChart,
        options: {
            // Add necessary options for the chart display
        }
    };

    // Create the first chart
    const solarVoltCtx = document.getElementById('chart1').getContext('2d');
    new Chart(solarVoltCtx, solarVoltChartConfig);

    const solarAmpCtx = document.getElementById('chart2').getContext('2d');
    new Chart(solarAmpCtx, lightChartConfig);

    // Create the third chart (battery amp)
    const batteryAmpCtx = document.getElementById('chart3').getContext('2d');
    new Chart(batteryAmpCtx, batteryAmpChartConfig);

    // Create the fourth chart (temperature)
    const temperatureCtx = document.getElementById('chart4').getContext('2d');
    new Chart(temperatureCtx, temperatureChartConfig);

    function navigateToParameterEntities() {
        window.location.href = '/ParameterEntities';
    }

</script>

<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCz7LjKs0i-n-vkj6iV-cE40eKoNhxoMIQ&callback=myMap"></script>
